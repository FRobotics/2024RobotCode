
VI		Notes

- BoxBegin
		- probably don't need current limits for either shooter or intake.  Suggest removing
		- The sensor type for the built in is "hall..." not encoder.  (Encoder 
			is for an externally attached encoder.
		- suggest setting rate limit for shooter.  maybe 0.1 seconds to full speed.
			this will limit the current draw and help battery
		- suggest setting rate limit for intake.  maybe 0.1 seconds to full speed.
			this will limit the current draw and help battery
		- for intake the current gear ratio is 36:1.  Suggest setting the sensor scaling 1/36
			so we can measure RPM of the intake wheels.  If you want the units to be
			rev/seconds then multiply by 1/60....

- Arm2Exec
		- set "first time" setpoint equal to position so it doesnt move.
		- for commands, suggest using "bool cmd mux array"  under General digital -> bool cmd.
			This helps arbitrate among competing commands.  
		- use feedback to remember setpoint and then use case to set new setpoint based on commands
			received.
		- feed this setpoint and the position that is read from motor controller to the position control.
		- write the result to the motor.
		- the position control has inputs for the limit switches too.
		- dont need to feed time to the write network table variables..


- BoxExec
		- for commands, suggest using "bool cmd mux array"  under General digital -> bool cmd.
			this helps arbitrate among commands.  Could just use individual bool cmd and process
			in state machine.  (works the same.)
		- dont need to feed time to the write network table variables..

X ArmBegin2	X  Suggest naming this Arm2Begin 
		X  The NEO is a "brushless" motor.
		X  Use "set limit switch config" for "forward" switch.  
		   	X Set to enabled to TRUE.
		   	X Set polarity to normally open.
		X  Use "set limit switch config" for "reverse" switch.  
		   	X Set to enabled to TRUE.
		   	X Set polarity to normally open.
		X  Use "Set Ramp Rate".  Suggest 0 to full speed in 0.2 seconds.
		X  Use "Set sensor conversion".  For postion if 1 = Revloutions, 
			use Deg/Revolutions and 1/GearRatio to calculate new
			conversion factor.   Same thing for velocity.  Standard units 
			are Revolution / Minute.  We know 1 Minute / 60 seconds 
			and Deg/Revolutions and 1/GearRatio.
		X set a value for initial position.  Put a note that this needs to be
			set.

X sArmExecute2	X Suggest renaming this to Arm2Execute...
		X This will be position control.  The math library now has a position
			control routine.
		X Read the sensors first ( position, velocity, forward and reverse limit switches )
		X write these to network tables.
		X use position control to set motor output.  We can discuss tuning.

